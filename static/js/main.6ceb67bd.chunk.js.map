{"version":3,"sources":["serviceWorker.js","Components/ListItem.js","Components/Header.js","Components/Search.js","Components/ListItemDefaultBg.js","Components/AddNote.js","Components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","ListItem","className","key","this","props","index","status","data","onClick","clickHandler","React","Component","Header","map","value","handler","title","Search","type","placeholder","onChange","ListItemDefaultBg","AddNote","autoFocus","inputData","inputChangeHandler","onKeyPress","addNoteHandler","App","inputChange","event","setState","addNoteData","target","addNote","uniqueId","state","list","concat","isCompleted","id","listItemClickHandler","item","changeTab","activeTabId","tabItem","tab","searchInputHandler","searchData","filterData","array","search","filter","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ceb67bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport '../Style/listItem.css'\r\nclass ListItem extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n         <div className={'list-item'} key={this.props.index}>\r\n             <p className={this.props.status?'line-through':''}>{this.props.data}</p>\r\n             <div className={'check-mark '+ (this.props.status?'active':'inactive')}  onClick={this.props.clickHandler}/>\r\n\r\n         </div>\r\n        )\r\n    }\r\n}\r\nexport default ListItem;","import React from \"react\";\r\nimport '../Style/header.css'\r\nclass Header extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className=\"nav-bar\">\r\n                    <div className=\"container\">\r\n                        <div className=\"left\"><h1>Todo App</h1></div>\r\n                        <div className=\"right\">\r\n                            {this.props.data.map((value,index)=><li key={index} className={value.status?'active':''} onClick={()=>this.props.handler(index)}>{value.title}</li>)}\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default  Header;","import React, {Component} from 'react';\r\n\r\nclass Search extends Component {\r\n    render() {\r\n        return (\r\n            <input type=\"text\" className={'add-note search-bar'} placeholder={'search here..'} onChange={this.props.handler}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport '../Style/listItem.css'\r\nclass ListItemDefaultBg extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className={'default-bg'}>\r\n                <h2>You don't have any tasks yet. Create a new one.</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ListItemDefaultBg;","import React from 'react';\r\n\r\nfunction AddNote(props) {\r\n    return (\r\n        <input type=\"text\" className={'add-note'} placeholder={'Add Note'} autoFocus={true} value={props.inputData} onChange={props.inputChangeHandler} onKeyPress={props.addNoteHandler} />\r\n    );\r\n}\r\nexport default AddNote;","import React from \"react\";\r\nimport ListItem from \"./ListItem\";\r\nimport '../Style/app.css'\r\nimport '../Style/listItem.css'\r\nimport Header from \"./Header\";\r\nimport Search from \"./Search\";\r\nimport ListItemDefaultBg from \"./ListItemDefaultBg\";\r\nimport AddNote from \"./AddNote\";\r\nclass App extends React.Component{\r\n    constructor() {\r\n        super();\r\n        this.state={\r\n            addNoteData:\"\",\r\n            searchData:\"\",\r\n            activeTabId:0,\r\n            uniqueId:0,\r\n            list:[],\r\n            tab:[{\r\n                title:'Home',\r\n                status:true\r\n            }, {\r\n                title: 'Completed',\r\n                status: false\r\n            },{\r\n                title:'Remaining',\r\n                status:false\r\n            }\r\n            ]\r\n\r\n        }\r\n\r\n    }\r\n    inputChange=(event)=>{\r\n        this.setState({\r\n            addNoteData:event.target.value\r\n        });\r\n    };\r\n    addNote=(event)=>{\r\n        if(event.key==='Enter'){\r\n            this.setState({\r\n                uniqueId:this.state.uniqueId+1,\r\n                list:this.state.list.concat({\r\n                        data:event.target.value,\r\n                        isCompleted:false,\r\n                        id:this.state.uniqueId,\r\n                }),\r\n                addNoteData:\"\"\r\n            });\r\n        }\r\n    };\r\n    listItemClickHandler=(id)=>{\r\n\r\n        const item=this.state.list.map((item)=> {\r\n            if(item.id===id){\r\n                item.isCompleted=!item.isCompleted;\r\n            }\r\n            return item\r\n        });\r\n        this.setState(item)\r\n\r\n    };\r\n    changeTab=(id)=>{\r\n        this.setState({\r\n            activeTabId:id\r\n        });\r\n        const tabItem=this.state.tab.map((tab,index)=>{\r\n            tab.status = id === index;\r\n            return tab;\r\n\r\n        });\r\n        this.setState(tabItem)\r\n    };\r\n    searchInputHandler=(event)=>{\r\n        this.setState({\r\n            searchData:event.target.value\r\n        });\r\n    };\r\n    filterData=(array=[],search='')=>array.filter((value) => {\r\n        if(value.data.includes(search)){\r\n            let item=null;\r\n            switch(this.state.activeTabId){\r\n                case 1:\r\n                    if(value.isCompleted) {item= value;}\r\n                    break;\r\n                case 2:\r\n                    if(!value.isCompleted) {item= value;}\r\n                    break;\r\n                default:{item = value;}\r\n            }\r\n            return item;\r\n        }\r\n\r\n    });\r\n\r\n    render() {\r\n        return (\r\n            <div className={'container'}>\r\n                <Header handler={this.changeTab} data={this.state.tab}/>\r\n                <div className=\"main-body\">\r\n                    <Search handler={this.searchInputHandler}/>\r\n                   <AddNote inputData={this.state.addNoteData} inputChangeHandler={this.inputChange} addNoteHandler={this.addNote} />\r\n                <div className=\"list-container\">\r\n                   {\r\n                       this.state.list.length===0?<ListItemDefaultBg/>:this.filterData(this.state.list,this.state.searchData).map((value,index)=>\r\n                           <ListItem clickHandler={()=>\r\n                               this.listItemClickHandler(value.id)}\r\n                                     data={value.data}\r\n                                     key={index}\r\n                                     status={value.isCompleted}\r\n                           />\r\n                           )\r\n                   }\r\n               </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./Components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}